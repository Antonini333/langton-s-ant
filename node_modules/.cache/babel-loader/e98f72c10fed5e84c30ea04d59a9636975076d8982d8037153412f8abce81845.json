{"ast":null,"code":"var _jsxFileName = \"/home/antonini333/Escritorio/LANGTONS ANT/src/components/AntGame.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AntGame = () => {\n  _s();\n  const ANTUP = 0;\n  const ANTRIGHT = 1;\n  const ANTDOWN = 2;\n  const ANTLEFT = 3;\n  let grid = {\n    cells: [],\n    ant: {\n      x: 0,\n      y: 0,\n      direction: ANTUP\n    },\n    height: 0,\n    width: 0,\n    moves: 0\n  };\n  const init = grid => {\n    if (!grid.cells.length) {\n      for (let x = 0; x < grid.width; x++) {\n        grid.cells[x] = [];\n        for (let y = 0; y < grid.height; y++) {\n          let cell = {\n            alive: false\n          };\n          grid.cells[x][y] = cell;\n        }\n      }\n      grid.ant = {\n        ...grid.ant,\n        x: grid.width / 2,\n        y: grid.height / 2\n      };\n    }\n  };\n  const rotateRight = grid => {\n    grid.ant.direction = (grid.ant.direction + 1 + (ANTLEFT + 1)) % (ANTLEFT + 1);\n  };\n  const rotateLeft = grid => {\n    grid.ant.direction = (grid.ant.direction - 1 + (ANTLEFT + 1)) % (ANTLEFT + 1);\n  };\n  const moveForward = grid => {\n    switch (grid.ant.direction) {\n      case ANTUP:\n        grid.ant.x = (grid.ant.x - 1 + grid.width) % grid.width;\n        break;\n      case ANTRIGHT:\n        grid.ant.y = (grid.ant.y + 1 + grid.height) % grid.height;\n        break;\n      case ANTDOWN:\n        grid.ant.x = (grid.ant.x + 1 + grid.width) % grid.width;\n        break;\n      case ANTLEFT:\n        grid.ant.y = (grid.ant.y - 1 + grid.height) % grid.height;\n        break;\n    }\n  };\n  const move = grid => {\n    let canvas = document.getElementById('grid');\n    let ctx = canvas.getContext('2d');\n    for (let i = 0; i < 100; i++) {\n      let cell = grid.cells[grid.ant.x][grid.ant.y];\n      if (cell.alive) {\n        grid.cells[grid.ant.x][grid.ant.y].alive = false;\n        ctx.fillStyle = \"white\";\n        ctx.fillRect(grid.ant.x, grid.ant.y, 1, 1);\n        rotateRight(grid);\n        moveForward(grid);\n      } else {\n        grid.cells[grid.ant.x][grid.ant.y].alive = true;\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(grid.ant.x, grid.ant.y, 1, 1);\n        rotateLeft(grid);\n        moveForward(grid);\n      }\n      ctx.fillStyle = 'red';\n      ctx.fillRect(grid.ant.x, grid.ant.y, 1, 1);\n      grid.moves++;\n    }\n  };\n  const moveAnt = grid => {\n    let canvas = document.getElementById('grid');\n    let ctx = canvas.getContext('2d');\n    move(grid);\n    ctx.stroke();\n    var moves = document.getElementById('moves');\n    moves.innerHTML = grid.moves;\n  };\n  useEffect(() => {\n    let canvas = document.getElementById('grid');\n    grid = {\n      ...grid,\n      width: canvas.width,\n      height: canvas.height\n    };\n    init(grid);\n    setInterval(moveAnt, 1000 / 13, grid);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"grid\",\n      width: \"500\",\n      height: \"500\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"moves\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(AntGame, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = AntGame;\nexport default AntGame;\nvar _c;\n$RefreshReg$(_c, \"AntGame\");","map":{"version":3,"names":["useEffect","AntGame","ANTUP","ANTRIGHT","ANTDOWN","ANTLEFT","grid","cells","ant","x","y","direction","height","width","moves","init","length","cell","alive","rotateRight","rotateLeft","moveForward","move","canvas","document","getElementById","ctx","getContext","i","fillStyle","fillRect","moveAnt","stroke","innerHTML","setInterval"],"sources":["/home/antonini333/Escritorio/LANGTONS ANT/src/components/AntGame.jsx"],"sourcesContent":["import { useEffect } from 'react';\n\nconst AntGame = () => {\n\n    const ANTUP = 0;\n    const ANTRIGHT = 1;\n    const ANTDOWN = 2;\n    const ANTLEFT = 3;\n\n    let grid = {\n        cells: [],\n        ant: {\n            x: 0,\n            y: 0,\n            direction: ANTUP\n        },\n        height: 0,\n        width: 0,\n        moves: 0\n    }\n\n    const init = (grid) => {\n        if (!grid.cells.length) {\n            for (let x = 0; x < grid.width; x++) {\n                grid.cells[x] = [];\n                for (let y = 0; y < grid.height; y++) {\n                    let cell = { alive: false }\n                    grid.cells[x][y] = cell;\n                }\n            }\n            grid.ant = { ...grid.ant, x: grid.width / 2, y: grid.height / 2 }\n        }\n    }\n\n    const rotateRight = (grid) => {\n        grid.ant.direction = ((grid.ant.direction + 1) + (ANTLEFT + 1)) % (ANTLEFT + 1);\n    }\n\n    const rotateLeft = (grid) => {\n        grid.ant.direction = ((grid.ant.direction - 1) + (ANTLEFT + 1)) % (ANTLEFT + 1);\n    }\n\n    const moveForward = (grid) => {\n        switch (grid.ant.direction) {\n            case ANTUP:\n                grid.ant.x = ((grid.ant.x - 1) + grid.width) % grid.width;\n                break;\n            case ANTRIGHT:\n                grid.ant.y = ((grid.ant.y + 1) + grid.height) % grid.height;\n                break;\n            case ANTDOWN:\n                grid.ant.x = ((grid.ant.x + 1) + grid.width) % grid.width;\n                break;\n            case ANTLEFT:\n                grid.ant.y = ((grid.ant.y - 1) + grid.height) % grid.height;\n                break;\n        }\n    }\n\n    const move = (grid) => {\n        let canvas = document.getElementById('grid');\n        let ctx = canvas.getContext('2d');\n        for (let i = 0; i < 100; i++) {\n            let cell = grid.cells[grid.ant.x][grid.ant.y];\n            if (cell.alive) {\n                grid.cells[grid.ant.x][grid.ant.y].alive = false;\n                ctx.fillStyle = \"white\";\n                ctx.fillRect(grid.ant.x, grid.ant.y, 1, 1);\n                rotateRight(grid);\n                moveForward(grid);\n            } else {\n                grid.cells[grid.ant.x][grid.ant.y].alive = true;\n                ctx.fillStyle = \"black\";\n                ctx.fillRect(grid.ant.x, grid.ant.y, 1, 1);\n                rotateLeft(grid);\n                moveForward(grid);\n            }\n            ctx.fillStyle = 'red';\n            ctx.fillRect(grid.ant.x, grid.ant.y, 1, 1);\n            grid.moves++;\n        }\n    }\n\n    const moveAnt = (grid) => {\n        let canvas = document.getElementById('grid');\n        let ctx = canvas.getContext('2d');\n        move(grid);\n        ctx.stroke();\n        var moves = document.getElementById('moves');\n        moves.innerHTML = grid.moves;\n    }\n\n    useEffect(() => {\n        let canvas = document.getElementById('grid');\n        grid = { ...grid, width: canvas.width, height: canvas.height }\n        init(grid);\n        setInterval(moveAnt, 1000 / 13, grid);\n    }, []);\n\n    return (\n        <>\n        <canvas id=\"grid\" width=\"500\" height=\"500\"></canvas>\n            <span id=\"moves\"></span>\n        </>\n    )\n}\n\nexport default AntGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}